/*!
 * jQuery-runner - v2.3.3 - 2014-08-06
 * https://github.com/jylauril/jquery-runner/
 * Copyright (c) 2014 Jyrki Laurila <https://github.com/jylauril>
 */
(function () { var t, i, s, n, e, r, o, a, h; if (s = { version: "2.3.3", name: "jQuery-runner" }, o = this.jQuery || this.Zepto || this.$, !o || !o.fn) throw new Error("[" + s.name + "] jQuery or jQuery-like library is required for this plugin to work"); e = {}, n = function (t) { return (10 > t ? "0" : "") + t }, h = 1, r = function () { return "runner" + h++ }, a = function (t, i) { return t["r" + i] || t["webkitR" + i] || t["mozR" + i] || t["msR" + i] || function (t) { return setTimeout(t, 30) } }(this, "equestAnimationFrame"), i = function (t, i) { var s, e, r, o, a, h, u, p, f, l, c; for (i = i || {}, p = [36e5, 6e4, 1e3, 10], h = ["", ":", ":", "."], a = "", o = "", r = i.milliseconds, e = p.length, f = 0, 0 > t && (t = Math.abs(t), a = "-"), s = l = 0, c = p.length; c > l; s = ++l) u = p[s], f = 0, t >= u && (f = Math.floor(t / u), t -= f * u), (f || s > 1 || o) && (s !== e - 1 || r) && (o += (o ? h[s] : "") + n(f)); return a + o }, t = function () { function t(i, s, n, a) { var h = ""; if (!(this instanceof t)) return new t(i, s, n); this.items = i; var u = this; $.each(e, function (t, s) { a && s.items[0].selector === i[0].selector && (h = u.id = s.id, e[h].reset(!0), i.each(function (t, i) { o(i).removeData("runner") })) }), ("" === h || void 0 === h) && (h = this.id = r()), this.settings = o.extend({}, this.settings, s), e[h] = this, i.each(function (t, i) { o(i).data("runner", h) }), this.value(this.settings.startAt), (n || this.settings.autostart) && this.start() } return t.prototype.running = !1, t.prototype.updating = !1, t.prototype.finished = !1, t.prototype.interval = null, t.prototype.total = 0, t.prototype.lastTime = 0, t.prototype.startTime = 0, t.prototype.lastLap = 0, t.prototype.lapTime = 0, t.prototype.settings = { autostart: !1, countdown: !1, stopAt: null, startAt: 0, milliseconds: !0, format: null }, t.prototype.value = function (t) { this.items.each(function (i) { return function (s, n) { var e; s = o(n), e = s.is("input") ? "val" : "text", s[e](i.format(t)) } }(this)) }, t.prototype.format = function (t) { var s; return s = this.settings.format, (s = o.isFunction(s) ? s : i)(t, this.settings) }, t.prototype.update = function () { var t, i, s, n, e; this.updating || (this.updating = !0, s = this.settings, e = o.now(), n = s.stopAt, t = s.countdown, i = e - this.lastTime, this.lastTime = e, t ? this.total -= i : this.total += i, null !== n && (t && this.total <= n || !t && this.total >= n) && (this.total = n, this.finished = !0, this.stop(), this.fire("runnerFinish")), this.value(this.total), this.updating = !1) }, t.prototype.fire = function (t) { this.items.trigger(t, this.info()) }, t.prototype.start = function () { var t; this.running || (this.running = !0, (!this.startTime || this.finished) && this.reset(), this.lastTime = o.now(), t = function (i) { return function () { i.running && (i.update(), a(t)) } }(this), a(t), this.fire("runnerStart")) }, t.prototype.stop = function () { this.running && (this.running = !1, this.update(), this.fire("runnerStop")) }, t.prototype.toggle = function () { this.running ? this.stop() : this.start() }, t.prototype.lap = function () { var t, i; return i = this.lastTime, t = i - this.lapTime, this.settings.countdown && (t = -t), (this.running || t) && (this.lastLap = t, this.lapTime = i), i = this.format(this.lastLap), this.fire("runnerLap"), i }, t.prototype.reset = function (t, i) { var s; t && this.stop(), s = o.now(), "number" != typeof this.settings.startAt || this.settings.countdown || (s -= this.settings.startAt), this.startTime = this.lapTime = this.lastTime = s, null !== i && i === !0 && (this.settings.startAt = 0), this.total = this.settings.startAt, this.value(this.total), this.finished = !1, this.fire("runnerReset") }, t.prototype.info = function () { var t; return t = this.lastLap || 0, { running: this.running, finished: this.finished, time: this.total, formattedTime: this.format(this.total), startTime: this.startTime, lapTime: t, formattedLapTime: this.format(t), settings: this.settings } }, t }(), o.fn.runner = function (i, n, r) { var a, h; switch (i || (i = "init"), "object" == typeof i && (r = n, n = i, i = "init"), a = this.data("runner"), h = a ? e[a] : !1, i) { case "init": new t(this, n, r); break; case "info": if (h) return h.info(); break; case "reset": h && h.reset(n, r); break; case "lap": if (h) return h.lap(); break; case "reinit": new t(this, n, r, !0); break; case "resetEvents": n ? r ? this.off(n, r) : this.off(n) : this.off(); break; case "start": case "stop": case "toggle": if (h) return h[i](); break; case "version": return s.version; default: o.error("[" + s.name + "] Method " + i + " does not exist") } return this }, o.fn.runner.format = i }).call(this);